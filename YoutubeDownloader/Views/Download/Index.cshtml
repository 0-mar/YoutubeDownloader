@model UrlModel

@{
    ViewData["Title"] = "Download";
}

<div>
    <h2>Your download will start shortly</h2>
    <p>
        In a moment, the server will get the audio from YouTube and download will start afterwards.
    </p>
    <p>
        Requested video URL: <a href="@Model.Url">@Model.Url</a>
    </p>
    <div id="toast--error" hidden>Error while downloading audio. Please try again later.</div>
</div>

<script>
    const url = "@Html.Raw(Model.Url)"
    const body = JSON.stringify({
        Url: url 
    });
    const headers = {
        "Content-type": "application/json"
    };

    fetch("/Download/GetResource/", {
       method: "POST",
       body: body,
       headers: headers
    })
    .then(response => {
            if (!response.ok) {
                document.getElementById("toast--error").hidden = false;
                return;
            }
            
            response.blob().then((blob) => {
                const downloadUrl = URL.createObjectURL(blob);
                                        const contentDisposition = response.headers.get("content-disposition");
                                        let fileName = "audio.mp3";
                                        const filenameRegex = /filename="([^"]+)"/;
                                        const match = filenameRegex.exec(contentDisposition);
                                        if (match && match[1]) {
                                            fileName = match[1];
                                        }
                                        console.log(fileName);
                                        const a = document.createElement('a');
                                        a.style.display = 'none';
                                        a.href = downloadUrl;
                                        a.download = fileName;
                                        document.body.appendChild(a);
                                        a.click();
                                        URL.revokeObjectURL(downloadUrl);
            });
            
            
            //return response.blob();
        })
        /*.then(blob => {
            const downloadUrl = URL.createObjectURL(blob);
            const contentDisposition = response.headers['Content-Disposition'];
            console.log(contentDisposition)
            const fileName = contentDisposition.split('filename=')[1].replace(/"/g, '');
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = downloadUrl;
            a.download = fileName;
            document.body.appendChild(a);
            a.click();
            URL.revokeObjectURL(downloadUrl);
        })*/
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
            document.getElementById("toast--error").hidden = false;
        });
    
    
    /*.then((response) => {
        if (response.status === 500) {
            document.getElementById("toast--error").hidden = false;
        }
    })*/
</script>